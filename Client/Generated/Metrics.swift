// -*- mode: Swift -*-

// AUTOGENERATED BY glean_parser v7.2.1. DO NOT EDIT. DO NOT COMMIT.

#if canImport(Foundation)
    import Foundation
#endif

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


import Glean

// swiftlint:disable superfluous_disable_command
// swiftlint:disable nesting
// swiftlint:disable line_length
// swiftlint:disable identifier_name
// swiftlint:disable force_try

extension GleanMetrics {
    class GleanBuild {
        private init() {
            // Intentionally left private, no external user can instantiate a new global object.
        }

        public static let info = BuildInfo(buildDate: DateComponents(calendar: Calendar.current, timeZone: TimeZone(abbreviation: "UTC"), year: 2024, month: 1, day: 25, hour: 17, minute: 30, second: 54))
    }

    enum Accessibility {
        struct DynamicTextExtra: EventExtras {
            var isAccessibilitySizeEnabled: String?
            var preferredSize: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isAccessibilitySizeEnabled = self.isAccessibilitySizeEnabled {
                    record["is_accessibility_size_enabled"] = String(isAccessibilitySizeEnabled)
                }
                if let preferredSize = self.preferredSize {
                    record["preferred_size"] = String(preferredSize)
                }

                return record
            }
        }

        struct InvertColorsExtra: EventExtras {
            var isEnabled: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isEnabled = self.isEnabled {
                    record["is_enabled"] = String(isEnabled)
                }

                return record
            }
        }

        struct ReduceMotionExtra: EventExtras {
            var isEnabled: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isEnabled = self.isEnabled {
                    record["is_enabled"] = String(isEnabled)
                }

                return record
            }
        }

        struct ReduceTransparencyExtra: EventExtras {
            var isEnabled: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isEnabled = self.isEnabled {
                    record["is_enabled"] = String(isEnabled)
                }

                return record
            }
        }

        struct SwitchControlExtra: EventExtras {
            var isRunning: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isRunning = self.isRunning {
                    record["is_running"] = String(isRunning)
                }

                return record
            }
        }

        struct VoiceOverExtra: EventExtras {
            var isRunning: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isRunning = self.isRunning {
                    record["is_running"] = String(isRunning)
                }

                return record
            }
        }

        /// Records the Dynamic Text feature
        static let dynamicText = EventMetricType<DynamicTextExtra>( // generated from accessibility.dynamic_text
            CommonMetricData(
                category: "accessibility",
                name: "dynamic_text",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["is_accessibility_size_enabled", "preferred_size"]
        )

        /// Records the Invert Colors feature
        static let invertColors = EventMetricType<InvertColorsExtra>( // generated from accessibility.invert_colors
            CommonMetricData(
                category: "accessibility",
                name: "invert_colors",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["is_enabled"]
        )

        /// Records the Reduce Motion feature
        static let reduceMotion = EventMetricType<ReduceMotionExtra>( // generated from accessibility.reduce_motion
            CommonMetricData(
                category: "accessibility",
                name: "reduce_motion",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["is_enabled"]
        )

        /// Records the Reduce Transparency feature
        static let reduceTransparency = EventMetricType<ReduceTransparencyExtra>( // generated from accessibility.reduce_transparency
            CommonMetricData(
                category: "accessibility",
                name: "reduce_transparency",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["is_enabled"]
        )

        /// Records the Switch Control feature
        static let switchControl = EventMetricType<SwitchControlExtra>( // generated from accessibility.switch_control
            CommonMetricData(
                category: "accessibility",
                name: "switch_control",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["is_running"]
        )

        /// Records the Voice Over feature
        static let voiceOver = EventMetricType<VoiceOverExtra>( // generated from accessibility.voice_over
            CommonMetricData(
                category: "accessibility",
                name: "voice_over",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["is_running"]
        )

    }

    enum Adjust {
        struct DeeplinkReceivedExtra: EventExtras {
            var receivedUrl: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let receivedUrl = self.receivedUrl {
                    record["received_url"] = String(receivedUrl)
                }

                return record
            }
        }

        /// A string containing the Adjust ad group ID from which the user installed
        /// Firefox-iOS.
        static let adGroup = StringMetricType( // generated from adjust.ad_group
            CommonMetricData(
                category: "adjust",
                name: "ad_group",
                sendInPings: ["first-session", "metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// A string containing the Adjust campaign ID from which the user installed
        /// Firefox-iOS.
        static let campaign = StringMetricType( // generated from adjust.campaign
            CommonMetricData(
                category: "adjust",
                name: "campaign",
                sendInPings: ["first-session", "metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// A string containing the Adjust creative ID from which the user installed
        /// Firefox-iOS.
        static let creative = StringMetricType( // generated from adjust.creative
            CommonMetricData(
                category: "adjust",
                name: "creative",
                sendInPings: ["first-session", "metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Send for Adjust callback for deeplink.
        static let deeplinkReceived = EventMetricType<DeeplinkReceivedExtra>( // generated from adjust.deeplink_received
            CommonMetricData(
                category: "adjust",
                name: "deeplink_received",
                sendInPings: ["events", "first-session", "metrics"],
                lifetime: .ping,
                disabled: true
            )
            , ["received_url"]
        )

        /// A string containing the Adjust network ID from which the user installed
        /// Firefox-iOS.
        static let network = StringMetricType( // generated from adjust.network
            CommonMetricData(
                category: "adjust",
                name: "network",
                sendInPings: ["first-session", "metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum App {
        struct NotificationPermissionExtra: EventExtras {
            var alertSetting: String?
            var status: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let alertSetting = self.alertSetting {
                    record["alert_setting"] = String(alertSetting)
                }
                if let status = self.status {
                    record["status"] = String(status)
                }

                return record
            }
        }

        /// Records the status of the users notification permission.
        static let notificationPermission = EventMetricType<NotificationPermissionExtra>( // generated from app.notification_permission
            CommonMetricData(
                category: "app",
                name: "notification_permission",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["alert_setting", "status"]
        )

        /// Counts the number of times the app is opened from an external
        /// link, implying the client has Firefox set as a default browser.
        /// 
        /// Currently this is our most accurate way of measuring how
        /// often Firefox is set as the default browser.
        static let openedAsDefaultBrowser = CounterMetricType( // generated from app.opened_as_default_browser
            CommonMetricData(
                category: "app",
                name: "opened_as_default_browser",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum AppCycle {
        /// Records when the app goes to background
        static let background = EventMetricType<NoExtras>( // generated from app_cycle.background
            CommonMetricData(
                category: "app_cycle",
                name: "background",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Records when the app comes to foreground
        static let foreground = EventMetricType<NoExtras>( // generated from app_cycle.foreground
            CommonMetricData(
                category: "app_cycle",
                name: "foreground",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

    }

    enum AppMenu {
        /// Counts the number of times a user disables Block Images
        /// in the app menu
        static let blockImagesDisabled = CounterMetricType( // generated from app_menu.block_images_disabled
            CommonMetricData(
                category: "app_menu",
                name: "block_images_disabled",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user enables Block Images
        /// in the app menu
        static let blockImagesEnabled = CounterMetricType( // generated from app_menu.block_images_enabled
            CommonMetricData(
                category: "app_menu",
                name: "block_images_enabled",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Customize Homepage
        /// in the app menu
        static let customizeHomepage = CounterMetricType( // generated from app_menu.customize_homepage
            CommonMetricData(
                category: "app_menu",
                name: "customize_homepage",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Help in the app menu
        static let help = CounterMetricType( // generated from app_menu.help
            CommonMetricData(
                category: "app_menu",
                name: "help",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Home in the app menu
        static let home = CounterMetricType( // generated from app_menu.home
            CommonMetricData(
                category: "app_menu",
                name: "home",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps in the menu toolbar
        /// on the homepage
        static let homepageMenu = CounterMetricType( // generated from app_menu.homepage_menu
            CommonMetricData(
                category: "app_menu",
                name: "homepage_menu",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Library in the app menu
        static let library = CounterMetricType( // generated from app_menu.library
            CommonMetricData(
                category: "app_menu",
                name: "library",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Logins & Passwords
        /// in the app menu
        static let logins = CounterMetricType( // generated from app_menu.logins
            CommonMetricData(
                category: "app_menu",
                name: "logins",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Disable Night Mode
        /// in the app menu
        static let nightModeDisabled = CounterMetricType( // generated from app_menu.night_mode_disabled
            CommonMetricData(
                category: "app_menu",
                name: "night_mode_disabled",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Enable Night Mode
        /// in the app menu
        static let nightModeEnabled = CounterMetricType( // generated from app_menu.night_mode_enabled
            CommonMetricData(
                category: "app_menu",
                name: "night_mode_enabled",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Settings in the app menu
        static let settings = CounterMetricType( // generated from app_menu.settings
            CommonMetricData(
                category: "app_menu",
                name: "settings",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Sign Into Sync
        /// in the app menu
        static let signIntoSync = CounterMetricType( // generated from app_menu.sign_into_sync
            CommonMetricData(
                category: "app_menu",
                name: "sign_into_sync",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps in the menu toolbar
        /// from a website
        static let siteMenu = CounterMetricType( // generated from app_menu.site_menu
            CommonMetricData(
                category: "app_menu",
                name: "site_menu",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps What's New in the app menu
        static let whatsNew = CounterMetricType( // generated from app_menu.whats_new
            CommonMetricData(
                category: "app_menu",
                name: "whats_new",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum Awesomebar {
        struct LocationExtra: EventExtras {
            var location: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let location = self.location {
                    record["location"] = String(location)
                }

                return record
            }
        }

        struct SearchResultTapExtra: EventExtras {
            var type: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let type = self.type {
                    record["type"] = String(type)
                }

                return record
            }
        }

        /// Records when dragging the location bar
        static let dragLocationBar = EventMetricType<NoExtras>( // generated from awesomebar.drag_location_bar
            CommonMetricData(
                category: "awesomebar",
                name: "drag_location_bar",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Records location of awesome bar when
        /// user opens the app
        static let location = EventMetricType<LocationExtra>( // generated from awesomebar.location
            CommonMetricData(
                category: "awesomebar",
                name: "location",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["location"]
        )

        /// The time a query against awesomebar took. This helps us understand the
        /// performance of the awesomebar in querying history and bookmarks. The query time
        /// will also help us verify that we are **not** introducing any performance
        /// regressions.
        static let queryTime = TimingDistributionMetricType( // generated from awesomebar.query_time
            CommonMetricData(
                category: "awesomebar",
                name: "query_time",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
            , .millisecond
        )

        /// Record type of search item tap from the
        /// list of results of awesomebar search.
        static let searchResultTap = EventMetricType<SearchResultTapExtra>( // generated from awesomebar.search_result_tap
            CommonMetricData(
                category: "awesomebar",
                name: "search_result_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["type"]
        )

        /// Counts the number of times a user taps share
        /// button on the awesomebar
        static let shareButtonTapped = EventMetricType<NoExtras>( // generated from awesomebar.share_button_tapped
            CommonMetricData(
                category: "awesomebar",
                name: "share_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

    }

    enum Bookmarks {
        private static let addLabel = CounterMetricType( // generated from bookmarks.add
            CommonMetricData(
                category: "bookmarks",
                name: "add",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a bookmark is added from the
        /// following:
        /// * Page Action Menu
        /// * Share Menu
        static let add = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.add
            category: "bookmarks",
            name: "add",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: addLabel,
            labels: ["activity-stream", "page-action-menu", "share-menu"]
        )

        private static let deleteLabel = CounterMetricType( // generated from bookmarks.delete
            CommonMetricData(
                category: "bookmarks",
                name: "delete",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a bookmark is deleted from
        /// the following:
        /// * Page Action Menu
        /// * Activity Stream
        /// * Bookmarks Panel
        static let delete = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.delete
            category: "bookmarks",
            name: "delete",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: deleteLabel,
            labels: ["activity-stream", "bookmarks-panel", "page-action-menu"]
        )

        private static let editLabel = CounterMetricType( // generated from bookmarks.edit
            CommonMetricData(
                category: "bookmarks",
                name: "edit",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a bookmark is tapped to
        /// be edited from:
        /// * Add bookmark toast Edit button
        /// * Bookmarks panel edit bookmarks view
        static let edit = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.edit
            category: "bookmarks",
            name: "edit",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: editLabel,
            labels: ["add-bookmark-toast", "bookmarks-panel"]
        )

        private static let openLabel = CounterMetricType( // generated from bookmarks.open
            CommonMetricData(
                category: "bookmarks",
                name: "open",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a bookmark is opened from
        /// the following:
        /// * Awesomebar results
        /// * Bookmarks Panel
        static let open = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.open
            category: "bookmarks",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: openLabel,
            labels: ["awesomebar-results", "bookmarks-panel"]
        )

        private static let viewListLabel = CounterMetricType( // generated from bookmarks.view_list
            CommonMetricData(
                category: "bookmarks",
                name: "view_list",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times the bookmarks list is opened
        /// from either the Home Panel tab button or the App Menu.
        static let viewList = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.view_list
            category: "bookmarks",
            name: "view_list",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: viewListLabel,
            labels: ["app-menu"]
        )

    }

    enum BrowserSearch {
        private static let adClicksLabel = CounterMetricType( // generated from browser_search.ad_clicks
            CommonMetricData(
                category: "browser_search",
                name: "ad_clicks",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Records clicks of adverts on SERP pages.
        /// The key format is `<provider-name>`.
        static let adClicks = try! LabeledMetricType<CounterMetricType>( // generated from browser_search.ad_clicks
            category: "browser_search",
            name: "ad_clicks",
            sendInPings: ["baseline", "metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: adClicksLabel,
            labels: nil
        )

        private static let withAdsLabel = CounterMetricType( // generated from browser_search.with_ads
            CommonMetricData(
                category: "browser_search",
                name: "with_ads",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Records counts of SERP pages with adverts displayed.
        /// The key format is `<provider-name>`.
        static let withAds = try! LabeledMetricType<CounterMetricType>( // generated from browser_search.with_ads
            category: "browser_search",
            name: "with_ads",
            sendInPings: ["baseline", "metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: withAdsLabel,
            labels: nil
        )

    }

    enum CfrAnalytics {
        struct DismissCfrFromButtonExtra: EventExtras {
            var hintType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let hintType = self.hintType {
                    record["hint_type"] = String(hintType)
                }

                return record
            }
        }

        struct DismissCfrFromOutsideTapExtra: EventExtras {
            var hintType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let hintType = self.hintType {
                    record["hint_type"] = String(hintType)
                }

                return record
            }
        }

        struct PressCfrActionButtonExtra: EventExtras {
            var hintType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let hintType = self.hintType {
                    record["hint_type"] = String(hintType)
                }

                return record
            }
        }

        /// Recorded when the user dismisses a CFR by tapping
        /// the close button in the CFR. Hint type is sent
        /// in the extra keys.
        static let dismissCfrFromButton = EventMetricType<DismissCfrFromButtonExtra>( // generated from cfr_analytics.dismiss_cfr_from_button
            CommonMetricData(
                category: "cfr_analytics",
                name: "dismiss_cfr_from_button",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["hint_type"]
        )

        /// Recorded when the user dismisses a CFR by tapping
        /// outside the CFR. Hint type is sent in the extra keys.
        static let dismissCfrFromOutsideTap = EventMetricType<DismissCfrFromOutsideTapExtra>( // generated from cfr_analytics.dismiss_cfr_from_outside_tap
            CommonMetricData(
                category: "cfr_analytics",
                name: "dismiss_cfr_from_outside_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["hint_type"]
        )

        /// Recorded when the user taps CFR's action button.
        /// Hint type is sent in the extra keys.
        static let pressCfrActionButton = EventMetricType<PressCfrActionButtonExtra>( // generated from cfr_analytics.press_cfr_action_button
            CommonMetricData(
                category: "cfr_analytics",
                name: "press_cfr_action_button",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["hint_type"]
        )

    }

    enum CreditCard {
        /// Recorded when the user taps on credit card autofill
        /// settings item in settings screen.
        static let autofillSettingsTapped = EventMetricType<NoExtras>( // generated from credit_card.autofill_settings_tapped
            CommonMetricData(
                category: "credit_card",
                name: "autofill_settings_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

    }

    enum DefaultBrowserCard {
        /// Counts the number of times default browser card is dismissed.
        static let dismissPressed = CounterMetricType( // generated from default_browser_card.dismiss_pressed
            CommonMetricData(
                category: "default_browser_card",
                name: "dismiss_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Reports events of Home Tab Banner evergreen impressions.
        static let evergreenImpression = EventMetricType<NoExtras>( // generated from default_browser_card.evergreen_impression
            CommonMetricData(
                category: "default_browser_card",
                name: "evergreen_impression",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Counts the number of times the Go To Settings button on
        /// default browser card is clicked.
        static let goToSettingsPressed = CounterMetricType( // generated from default_browser_card.go_to_settings_pressed
            CommonMetricData(
                category: "default_browser_card",
                name: "go_to_settings_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum DefaultBrowserOnboarding {
        /// Counts the number of times default browser onboarding is dismissed.
        static let dismissPressed = CounterMetricType( // generated from default_browser_onboarding.dismiss_pressed
            CommonMetricData(
                category: "default_browser_onboarding",
                name: "dismiss_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times the Go To Settings button on
        /// default browser onboarding is clicked.
        static let goToSettingsPressed = CounterMetricType( // generated from default_browser_onboarding.go_to_settings_pressed
            CommonMetricData(
                category: "default_browser_onboarding",
                name: "go_to_settings_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum Deletion {
        /// The FxA device id.
        static let syncDeviceId = StringMetricType( // generated from deletion.sync_device_id
            CommonMetricData(
                category: "deletion",
                name: "sync_device_id",
                sendInPings: ["deletion-request"],
                lifetime: .user,
                disabled: false
            )
        )

    }

    enum Device {
        /// True if the device support device owner authentication
        /// with either biometrics or a passcode.
        static let authentication = BooleanMetricType( // generated from device.authentication
            CommonMetricData(
                category: "device",
                name: "authentication",
                sendInPings: ["metrics"],
                lifetime: .application,
                disabled: true
            )
        )

    }

    enum Downloads {
        /// Records when the download now button is pressed
        static let downloadNowButtonTapped = EventMetricType<NoExtras>( // generated from downloads.download_now_button_tapped
            CommonMetricData(
                category: "downloads",
                name: "download_now_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Records when a row is pressed in the downloads panel
        static let downloadsPanelRowTapped = EventMetricType<NoExtras>( // generated from downloads.downloads_panel_row_tapped
            CommonMetricData(
                category: "downloads",
                name: "downloads_panel_row_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Records when the toast message is tapped after a download is completed
        static let viewDownloadCompleteToast = EventMetricType<NoExtras>( // generated from downloads.view_download_complete_toast
            CommonMetricData(
                category: "downloads",
                name: "view_download_complete_toast",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

    }

    enum FirefoxHomePage {
        struct HistoryHighlightsContextExtra: EventExtras {
            var type: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let type = self.type {
                    record["type"] = String(type)
                }

                return record
            }
        }

        struct ReadingListViewExtra: EventExtras {
            var readingListCount: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let readingListCount = self.readingListCount {
                    record["reading_list_count"] = String(readingListCount)
                }

                return record
            }
        }

        struct RecentlySavedBookmarkViewExtra: EventExtras {
            var bookmarkCount: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let bookmarkCount = self.bookmarkCount {
                    record["bookmark_count"] = String(bookmarkCount)
                }

                return record
            }
        }

        /// Counts the number of times a user taps to open the
        /// settings menu to customize the Firefox Homepage
        static let customizeHomepageButton = CounterMetricType( // generated from firefox_home_page.customize_homepage_button
            CommonMetricData(
                category: "firefox_home_page",
                name: "customize_homepage_button",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        private static let firefoxHomepageOriginLabel = CounterMetricType( // generated from firefox_home_page.firefox_homepage_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "firefox_homepage_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// The number of times a user sees the Firefox Homepage,
        /// with a home page origin.
        static let firefoxHomepageOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.firefox_homepage_origin
            category: "firefox_home_page",
            name: "firefox_homepage_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: firefoxHomepageOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// The number of times a user sees the Firefox Homepage
        static let firefoxHomepageView = CounterMetricType( // generated from firefox_home_page.firefox_homepage_view
            CommonMetricData(
                category: "firefox_home_page",
                name: "firefox_homepage_view",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Records when a user clicks on a contextual
        /// menu option on a history highlight
        static let historyHighlightsContext = EventMetricType<HistoryHighlightsContextExtra>( // generated from firefox_home_page.history_highlights_context
            CommonMetricData(
                category: "firefox_home_page",
                name: "history_highlights_context",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["type"]
        )

        /// Records the event where a user taps on a group item
        /// within the History Highlights (Recently Visited) section.
        static let historyHighlightsGroupOpen = EventMetricType<NoExtras>( // generated from firefox_home_page.history_highlights_group_open
            CommonMetricData(
                category: "firefox_home_page",
                name: "history_highlights_group_open",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Counts the number of times a user taps to open an
        /// existing tab from the History Highlights section
        static let historyHighlightsItemOpened = EventMetricType<NoExtras>( // generated from firefox_home_page.history_highlights_item_opened
            CommonMetricData(
                category: "firefox_home_page",
                name: "history_highlights_item_opened",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Counts the number of times a user taps the
        /// Show All button in the History section
        static let historyHighlightsShowAll = CounterMetricType( // generated from firefox_home_page.history_highlights_show_all
            CommonMetricData(
                category: "firefox_home_page",
                name: "history_highlights_show_all",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user sees the
        /// History Highlights section on the homepage
        static let historyHighlightsView = CounterMetricType( // generated from firefox_home_page.history_highlights_view
            CommonMetricData(
                category: "firefox_home_page",
                name: "history_highlights_view",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        private static let jumpBackInGroupOpenOriginLabel = CounterMetricType( // generated from firefox_home_page.jump_back_in_group_open_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_group_open_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps to open an
        /// existing group from the Jump Back In section,
        /// with a home page origin.
        static let jumpBackInGroupOpenOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.jump_back_in_group_open_origin
            category: "firefox_home_page",
            name: "jump_back_in_group_open_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: jumpBackInGroupOpenOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user taps to open an
        /// existing group from the Jump Back In section
        static let jumpBackInGroupOpened = CounterMetricType( // generated from firefox_home_page.jump_back_in_group_opened
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_group_opened",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps the
        /// Show All button in the Jump Back In section.
        static let jumpBackInShowAll = CounterMetricType( // generated from firefox_home_page.jump_back_in_show_all
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_show_all",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        private static let jumpBackInShowAllOriginLabel = CounterMetricType( // generated from firefox_home_page.jump_back_in_show_all_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_show_all_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps the
        /// Show All button in the Jump Back In section,
        /// with a home page origin.
        static let jumpBackInShowAllOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.jump_back_in_show_all_origin
            category: "firefox_home_page",
            name: "jump_back_in_show_all_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: jumpBackInShowAllOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user taps to open an
        /// existing tab from the Jump Back In section
        static let jumpBackInTabOpened = CounterMetricType( // generated from firefox_home_page.jump_back_in_tab_opened
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_tab_opened",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        private static let jumpBackInTabOpenedOriginLabel = CounterMetricType( // generated from firefox_home_page.jump_back_in_tab_opened_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_tab_opened_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps to open an
        /// existing tab from the Jump Back In section,
        /// with a home page origin.
        static let jumpBackInTabOpenedOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.jump_back_in_tab_opened_origin
            category: "firefox_home_page",
            name: "jump_back_in_tab_opened_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: jumpBackInTabOpenedOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user sees a Jump Back In tile
        /// in the Jump Back In section on the homepage
        static let jumpBackInTileView = CounterMetricType( // generated from firefox_home_page.jump_back_in_tile_view
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_tile_view",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts when a user opens Firefox Home
        /// from awesomebar.
        static let openFromAwesomebar = CounterMetricType( // generated from firefox_home_page.open_from_awesomebar
            CommonMetricData(
                category: "firefox_home_page",
                name: "open_from_awesomebar",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts when user opens Firefox Home from
        /// bottom right hamburger menu Home button
        /// and New Tab button.
        static let openFromMenuHomeButton = CounterMetricType( // generated from firefox_home_page.open_from_menu_home_button
            CommonMetricData(
                category: "firefox_home_page",
                name: "open_from_menu_home_button",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Measures the state of the show Pocket stories preference.
        static let pocketStoriesVisible = BooleanMetricType( // generated from firefox_home_page.pocket_stories_visible
            CommonMetricData(
                category: "firefox_home_page",
                name: "pocket_stories_visible",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of reading list items
        /// appearing in the Recently Saved section
        /// on the Firefox home page.
        static let readingListView = EventMetricType<ReadingListViewExtra>( // generated from firefox_home_page.reading_list_view
            CommonMetricData(
                category: "firefox_home_page",
                name: "reading_list_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["reading_list_count"]
        )

        /// Counts the number of times a bookmarked item in
        /// the Recently Saved section is tapped
        static let recentlySavedBookmarkItem = CounterMetricType( // generated from firefox_home_page.recently_saved_bookmark_item
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_bookmark_item",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        private static let recentlySavedBookmarkOriginLabel = CounterMetricType( // generated from firefox_home_page.recently_saved_bookmark_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_bookmark_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a bookmarked item in
        /// the Recently Saved section is tapped,
        /// with a home page origin.
        static let recentlySavedBookmarkOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.recently_saved_bookmark_origin
            category: "firefox_home_page",
            name: "recently_saved_bookmark_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: recentlySavedBookmarkOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of bookmarked items appearing
        /// in the Recently Saved section on the home page.
        static let recentlySavedBookmarkView = EventMetricType<RecentlySavedBookmarkViewExtra>( // generated from firefox_home_page.recently_saved_bookmark_view
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_bookmark_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["bookmark_count"]
        )

        private static let recentlySavedReadOriginLabel = CounterMetricType( // generated from firefox_home_page.recently_saved_read_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_read_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a reading list
        /// item in the Recently Saved section is tapped,
        /// with a home page origin.
        static let recentlySavedReadOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.recently_saved_read_origin
            category: "firefox_home_page",
            name: "recently_saved_read_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: recentlySavedReadOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a reading list
        /// item in the Recently Saved section is tapped.
        static let recentlySavedReadingItem = CounterMetricType( // generated from firefox_home_page.recently_saved_reading_item
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_reading_item",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps the Show All
        /// button of the Recently Saved Section
        static let recentlySavedShowAll = CounterMetricType( // generated from firefox_home_page.recently_saved_show_all
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_show_all",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        private static let recentlySavedShowAllOriginLabel = CounterMetricType( // generated from firefox_home_page.recently_saved_show_all_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_show_all_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps the Show All
        /// button of the Recently Saved Section,
        /// with a home page origin.
        static let recentlySavedShowAllOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.recently_saved_show_all_origin
            category: "firefox_home_page",
            name: "recently_saved_show_all_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: recentlySavedShowAllOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user taps to open a
        /// synced tab from the Jump Back In section
        static let syncedTabOpened = CounterMetricType( // generated from firefox_home_page.synced_tab_opened
            CommonMetricData(
                category: "firefox_home_page",
                name: "synced_tab_opened",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        private static let syncedTabOpenedOriginLabel = CounterMetricType( // generated from firefox_home_page.synced_tab_opened_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "synced_tab_opened_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps to open a
        /// synced tab from the Jump Back In section,
        /// with a home page origin.
        static let syncedTabOpenedOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.synced_tab_opened_origin
            category: "firefox_home_page",
            name: "synced_tab_opened_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: syncedTabOpenedOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user taps the
        /// Show All button of Synced Tab in the Jump Back In section.
        static let syncedTabShowAll = CounterMetricType( // generated from firefox_home_page.synced_tab_show_all
            CommonMetricData(
                category: "firefox_home_page",
                name: "synced_tab_show_all",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        private static let syncedTabShowAllOriginLabel = CounterMetricType( // generated from firefox_home_page.synced_tab_show_all_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "synced_tab_show_all_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps the
        /// Show All button of Synced Tab in the Jump Back In section,
        /// with a home page origin.
        static let syncedTabShowAllOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.synced_tab_show_all_origin
            category: "firefox_home_page",
            name: "synced_tab_show_all_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: syncedTabShowAllOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user sees the
        /// Synced Tab tile on the homepage
        static let syncedTabTileView = CounterMetricType( // generated from firefox_home_page.synced_tab_tile_view
            CommonMetricData(
                category: "firefox_home_page",
                name: "synced_tab_tile_view",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum History {
        /// Recorded when a user taps on trash icon in history panel
        static let deleteTap = EventMetricType<NoExtras>( // generated from history.delete_tap
            CommonMetricData(
                category: "history",
                name: "delete_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Counts the number of times a user has selected a
        /// search term group inside the history panel. Selecting
        /// this item will navigate them to a view containing a list
        /// of all Site items that appear in that group.
        static let groupList = CounterMetricType( // generated from history.group_list
            CommonMetricData(
                category: "history",
                name: "group_list",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Recorded when a user taps on search icon in history panel
        static let searchTap = EventMetricType<NoExtras>( // generated from history.search_tap
            CommonMetricData(
                category: "history",
                name: "search_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        private static let selectedItemLabel = CounterMetricType( // generated from history.selected_item
            CommonMetricData(
                category: "history",
                name: "selected_item",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user selected an item from
        /// the history panel. This labeled counter will tell apart
        /// items that appear inside a group, and those that do not.
        static let selectedItem = try! LabeledMetricType<CounterMetricType>( // generated from history.selected_item
            category: "history",
            name: "selected_item",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: selectedItemLabel,
            labels: ["group-item", "non-grouped-item"]
        )

    }

    enum InactiveTabsTray {
        struct ToggleInactiveTabTrayExtra: EventExtras {
            var toggleType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let toggleType = self.toggleType {
                    record["toggle_type"] = String(toggleType)
                }

                return record
            }
        }

        /// Recorded when a user is shown inactive tab view
        static let inactiveTabShown = CounterMetricType( // generated from inactive_tabs_tray.inactive_tab_shown
            CommonMetricData(
                category: "inactive_tabs_tray",
                name: "inactive_tab_shown",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Recorded when a user swipes to close an inactive tab
        static let inactiveTabSwipeClose = CounterMetricType( // generated from inactive_tabs_tray.inactive_tab_swipe_close
            CommonMetricData(
                category: "inactive_tabs_tray",
                name: "inactive_tab_swipe_close",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Recorded when a user taps on close all inactive tabs button
        static let inactiveTabsCloseAllBtn = CounterMetricType( // generated from inactive_tabs_tray.inactive_tabs_close_all_btn
            CommonMetricData(
                category: "inactive_tabs_tray",
                name: "inactive_tabs_close_all_btn",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Recorded when a user taps on an inactive tab
        static let openInactiveTab = CounterMetricType( // generated from inactive_tabs_tray.open_inactive_tab
            CommonMetricData(
                category: "inactive_tabs_tray",
                name: "open_inactive_tab",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times user toggle (expand or collapse)
        /// inactive tab section.
        static let toggleInactiveTabTray = EventMetricType<ToggleInactiveTabTrayExtra>( // generated from inactive_tabs_tray.toggle_inactive_tab_tray
            CommonMetricData(
                category: "inactive_tabs_tray",
                name: "toggle_inactive_tab_tray",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["toggle_type"]
        )

    }

    enum InstalledMozillaProducts {
        /// If Focus is installed on the users's device.
        static let focus = BooleanMetricType( // generated from installed_mozilla_products.focus
            CommonMetricData(
                category: "installed_mozilla_products",
                name: "focus",
                sendInPings: ["metrics"],
                lifetime: .application,
                disabled: true
            )
        )

        /// If Klar is installed on the users's device.
        static let klar = BooleanMetricType( // generated from installed_mozilla_products.klar
            CommonMetricData(
                category: "installed_mozilla_products",
                name: "klar",
                sendInPings: ["metrics"],
                lifetime: .application,
                disabled: true
            )
        )

    }

    enum KeyCommands {
        struct PressKeyCommandActionExtra: EventExtras {
            var action: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let action = self.action {
                    record["action"] = String(action)
                }

                return record
            }
        }

        /// Records when a key command action is triggered
        static let pressKeyCommandAction = EventMetricType<PressKeyCommandActionExtra>( // generated from key_commands.press_key_command_action
            CommonMetricData(
                category: "key_commands",
                name: "press_key_command_action",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["action"]
        )

    }

    enum LegacyIds {
        /// The client id from legacy telemetry.
        static let clientId = UuidMetricType( // generated from legacy.ids.client_id
            CommonMetricData(
                category: "legacy.ids",
                name: "client_id",
                sendInPings: ["deletion-request", "metrics"],
                lifetime: .user,
                disabled: false
            )
        )

    }

    enum Library {
        private static let panelPressedLabel = CounterMetricType( // generated from library.panel_pressed
            CommonMetricData(
                category: "library",
                name: "panel_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a specific library panel
        /// button is tapped for Bookmarks, History, Reading List,
        /// Downloads and Synced tabs
        static let panelPressed = try! LabeledMetricType<CounterMetricType>( // generated from library.panel_pressed
            category: "library",
            name: "panel_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: panelPressedLabel,
            labels: ["bookmarks-panel", "downloads-panel", "history-panel", "reading-panel", "sync-panel"]
        )

    }

    enum Messaging {
        struct ClickedExtra: EventExtras {
            var actionUuid: String?
            var messageKey: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let actionUuid = self.actionUuid {
                    record["action_uuid"] = String(actionUuid)
                }
                if let messageKey = self.messageKey {
                    record["message_key"] = String(messageKey)
                }

                return record
            }
        }

        struct DismissedExtra: EventExtras {
            var messageKey: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let messageKey = self.messageKey {
                    record["message_key"] = String(messageKey)
                }

                return record
            }
        }

        struct ExpiredExtra: EventExtras {
            var messageKey: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let messageKey = self.messageKey {
                    record["message_key"] = String(messageKey)
                }

                return record
            }
        }

        struct MalformedExtra: EventExtras {
            var messageKey: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let messageKey = self.messageKey {
                    record["message_key"] = String(messageKey)
                }

                return record
            }
        }

        struct ShownExtra: EventExtras {
            var messageKey: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let messageKey = self.messageKey {
                    record["message_key"] = String(messageKey)
                }

                return record
            }
        }

        /// A message was clicked by the user.
        static let clicked = EventMetricType<ClickedExtra>( // generated from messaging.clicked
            CommonMetricData(
                category: "messaging",
                name: "clicked",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["action_uuid", "message_key"]
        )

        /// A message was dismissed by the user.
        static let dismissed = EventMetricType<DismissedExtra>( // generated from messaging.dismissed
            CommonMetricData(
                category: "messaging",
                name: "dismissed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["message_key"]
        )

        /// A message's max display count has been reached.
        static let expired = EventMetricType<ExpiredExtra>( // generated from messaging.expired
            CommonMetricData(
                category: "messaging",
                name: "expired",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["message_key"]
        )

        /// A message was malformed.
        static let malformed = EventMetricType<MalformedExtra>( // generated from messaging.malformed
            CommonMetricData(
                category: "messaging",
                name: "malformed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["message_key"]
        )

        /// A message was shown to the user.
        static let shown = EventMetricType<ShownExtra>( // generated from messaging.shown
            CommonMetricData(
                category: "messaging",
                name: "shown",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["message_key"]
        )

    }

    enum Migration {
        /// Counts the number of times a user runs the
        /// sd web image library cache cleanup
        static let imageSdCacheCleanup = CounterMetricType( // generated from migration.image_sd_cache_cleanup
            CommonMetricData(
                category: "migration",
                name: "image_sd_cache_cleanup",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum Onboarding {
        struct CardViewExtra: EventExtras {
            var cardType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }

                return record
            }
        }

        struct CloseTapExtra: EventExtras {
            var cardType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }

                return record
            }
        }

        struct NotificationPermissionPromptExtra: EventExtras {
            var granted: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let granted = self.granted {
                    record["granted"] = String(granted)
                }

                return record
            }
        }

        struct PrimaryButtonTapExtra: EventExtras {
            var cardType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }

                return record
            }
        }

        struct SecondaryButtonTapExtra: EventExtras {
            var cardType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }

                return record
            }
        }

        struct WallpaperSelectedExtra: EventExtras {
            var wallpaperName: String?
            var wallpaperType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let wallpaperName = self.wallpaperName {
                    record["wallpaper_name"] = String(wallpaperName)
                }
                if let wallpaperType = self.wallpaperType {
                    record["wallpaper_type"] = String(wallpaperType)
                }

                return record
            }
        }

        struct WallpaperSelectorSelectedExtra: EventExtras {
            var wallpaperName: String?
            var wallpaperType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let wallpaperName = self.wallpaperName {
                    record["wallpaper_name"] = String(wallpaperName)
                }
                if let wallpaperType = self.wallpaperType {
                    record["wallpaper_type"] = String(wallpaperType)
                }

                return record
            }
        }

        /// Records when an onboarding card is shown
        static let cardView = EventMetricType<CardViewExtra>( // generated from onboarding.card_view
            CommonMetricData(
                category: "onboarding",
                name: "card_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["card_type"]
        )

        /// Records when the user closes the onboarding.
        static let closeTap = EventMetricType<CloseTapExtra>( // generated from onboarding.close_tap
            CommonMetricData(
                category: "onboarding",
                name: "close_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["card_type"]
        )

        /// Records the users decision to enable/disable notifications.
        static let notificationPermissionPrompt = EventMetricType<NotificationPermissionPromptExtra>( // generated from onboarding.notification_permission_prompt
            CommonMetricData(
                category: "onboarding",
                name: "notification_permission_prompt",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["granted"]
        )

        /// Records when the primary button is tap during the onboarding
        static let primaryButtonTap = EventMetricType<PrimaryButtonTapExtra>( // generated from onboarding.primary_button_tap
            CommonMetricData(
                category: "onboarding",
                name: "primary_button_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["card_type"]
        )

        /// Records when the secondary button is tap during the onboarding
        static let secondaryButtonTap = EventMetricType<SecondaryButtonTapExtra>( // generated from onboarding.secondary_button_tap
            CommonMetricData(
                category: "onboarding",
                name: "secondary_button_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["card_type"]
        )

        /// Recorded when the user selects a wallpaper from
        /// the wallpaper onboarding screen.
        static let wallpaperSelected = EventMetricType<WallpaperSelectedExtra>( // generated from onboarding.wallpaper_selected
            CommonMetricData(
                category: "onboarding",
                name: "wallpaper_selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["wallpaper_name", "wallpaper_type"]
        )

        /// Recorded when the wallpaper onboarding bottom sheet
        /// is dismissed by the user.
        static let wallpaperSelectorClose = EventMetricType<NoExtras>( // generated from onboarding.wallpaper_selector_close
            CommonMetricData(
                category: "onboarding",
                name: "wallpaper_selector_close",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Recorded when the user selects a wallpaper from
        /// the wallpaper onboarding bottom sheet. Wallpaper information
        /// is sent in the extra keys.
        static let wallpaperSelectorSelected = EventMetricType<WallpaperSelectorSelectedExtra>( // generated from onboarding.wallpaper_selector_selected
            CommonMetricData(
                category: "onboarding",
                name: "wallpaper_selector_selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["wallpaper_name", "wallpaper_type"]
        )

        /// Recorded when the wallpaper onboarding bottom sheet is shown to the user.
        static let wallpaperSelectorView = EventMetricType<NoExtras>( // generated from onboarding.wallpaper_selector_view
            CommonMetricData(
                category: "onboarding",
                name: "wallpaper_selector_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

    }

    enum PageActionMenu {
        /// Counts the number of times a user taps Copy Address
        /// in the page action menu
        static let copyAddress = CounterMetricType( // generated from page_action_menu.copy_address
            CommonMetricData(
                category: "page_action_menu",
                name: "copy_address",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user creates a new tab from the
        /// page action menu.
        static let createNewTab = CounterMetricType( // generated from page_action_menu.create_new_tab
            CommonMetricData(
                category: "page_action_menu",
                name: "create_new_tab",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Find in Page
        /// in the page action menu
        static let findInPage = CounterMetricType( // generated from page_action_menu.find_in_page
            CommonMetricData(
                category: "page_action_menu",
                name: "find_in_page",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Pin to Top Sites
        /// in the page action menu
        static let pinToTopSites = CounterMetricType( // generated from page_action_menu.pin_to_top_sites
            CommonMetricData(
                category: "page_action_menu",
                name: "pin_to_top_sites",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Pin to Top Sites
        /// in the page action menu
        static let removePinnedSite = CounterMetricType( // generated from page_action_menu.remove_pinned_site
            CommonMetricData(
                category: "page_action_menu",
                name: "remove_pinned_site",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Report Site Issue
        /// in the page action menu
        static let reportSiteIssue = CounterMetricType( // generated from page_action_menu.report_site_issue
            CommonMetricData(
                category: "page_action_menu",
                name: "report_site_issue",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Request Desktop Site
        /// in the page action menu
        static let requestDesktopSite = CounterMetricType( // generated from page_action_menu.request_desktop_site
            CommonMetricData(
                category: "page_action_menu",
                name: "request_desktop_site",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Request Mobile Site
        /// in the page action menu
        static let requestMobileSite = CounterMetricType( // generated from page_action_menu.request_mobile_site
            CommonMetricData(
                category: "page_action_menu",
                name: "request_mobile_site",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Send to Device
        /// in the page action menu
        static let sendToDevice = CounterMetricType( // generated from page_action_menu.send_to_device
            CommonMetricData(
                category: "page_action_menu",
                name: "send_to_device",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user taps Share Page With in the
        /// page action menu
        static let sharePageWith = CounterMetricType( // generated from page_action_menu.share_page_with
            CommonMetricData(
                category: "page_action_menu",
                name: "share_page_with",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user navigates to the downloads panel
        /// from the page action menu.
        static let viewDownloadsPanel = CounterMetricType( // generated from page_action_menu.view_downloads_panel
            CommonMetricData(
                category: "page_action_menu",
                name: "view_downloads_panel",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times a user navigates to the history panel
        /// from the page action menu.
        static let viewHistoryPanel = CounterMetricType( // generated from page_action_menu.view_history_panel
            CommonMetricData(
                category: "page_action_menu",
                name: "view_history_panel",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum PlacesHistoryMigration {
        /// A time distribution of how long it took for the migration to occur
        static let duration = TimingDistributionMetricType( // generated from places_history_migration.duration
            CommonMetricData(
                category: "places_history_migration",
                name: "duration",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
            , .millisecond
        )

        /// A Rate of how often migrations end
        static let migrationEndedRate = RateMetricType( // generated from places_history_migration.migration_ended_rate
            CommonMetricData(
                category: "places_history_migration",
                name: "migration_ended_rate",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// A Rate of how often migrations error out
        static let migrationErrorRate = RateMetricType( // generated from places_history_migration.migration_error_rate
            CommonMetricData(
                category: "places_history_migration",
                name: "migration_error_rate",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// The number of visits migrated to the places.db
        static let numMigrated = QuantityMetricType( // generated from places_history_migration.num_migrated
            CommonMetricData(
                category: "places_history_migration",
                name: "num_migrated",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// The number of visits expected to migrate to the places.db
        static let numToMigrate = QuantityMetricType( // generated from places_history_migration.num_to_migrate
            CommonMetricData(
                category: "places_history_migration",
                name: "num_to_migrate",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum Pocket {
        private static let openStoryOriginLabel = CounterMetricType( // generated from pocket.open_story_origin
            CommonMetricData(
                category: "pocket",
                name: "open_story_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Records when a user opens Pocket article from
        /// Firefox Home Pocket feed, with a home page origin.
        static let openStoryOrigin = try! LabeledMetricType<CounterMetricType>( // generated from pocket.open_story_origin
            category: "pocket",
            name: "open_story_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: openStoryOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        private static let openStoryPositionLabel = CounterMetricType( // generated from pocket.open_story_position
            CommonMetricData(
                category: "pocket",
                name: "open_story_position",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts when a user opens Pocket article from
        /// Firefox Home Pocket feed.
        /// The label is position of tile i.e. 0,1,2...
        static let openStoryPosition = try! LabeledMetricType<CounterMetricType>( // generated from pocket.open_story_position
            category: "pocket",
            name: "open_story_position",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: openStoryPositionLabel,
            labels: nil
        )

        /// Counts when a user gets to pocket section
        /// on Firefox Home
        static let sectionImpressions = CounterMetricType( // generated from pocket.section_impressions
            CommonMetricData(
                category: "pocket",
                name: "section_impressions",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum Preferences {
        struct ChangedExtra: EventExtras {
            var changedTo: String?
            var preference: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let changedTo = self.changedTo {
                    record["changed_to"] = String(changedTo)
                }
                if let preference = self.preference {
                    record["preference"] = String(preference)
                }

                return record
            }
        }

        struct PrivateBrowsingButtonTappedExtra: EventExtras {
            var isPrivate: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        /// Recorded when a preference is changed and includes the
        /// preference that changed as well as the value changed to
        /// recorded in the extra keys.
        static let changed = EventMetricType<ChangedExtra>( // generated from preferences.changed
            CommonMetricData(
                category: "preferences",
                name: "changed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["changed_to", "preference"]
        )

        /// Measures the state of the "Close Private Tabs" preference.
        static let closePrivateTabs = BooleanMetricType( // generated from preferences.close_private_tabs
            CommonMetricData(
                category: "preferences",
                name: "close_private_tabs",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// The setting a user chooses as their Home page. By default,
        /// it is initially set to Firefox Home.
        static let homePageSetting = StringMetricType( // generated from preferences.home_page_setting
            CommonMetricData(
                category: "preferences",
                name: "home_page_setting",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// The name of the view that the user wants to see on new tabs.
        /// For example History, Homepage or Blank. It is used to measure
        /// usage of this feature, to see how effective feature promotion
        /// campaigns are and to establish a baseline number for when we
        /// introduce the new Activity Stream features.
        static let newTabExperience = StringMetricType( // generated from preferences.new_tab_experience
            CommonMetricData(
                category: "preferences",
                name: "new_tab_experience",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Records when the private browsing button is tapped
        static let privateBrowsingButtonTapped = EventMetricType<PrivateBrowsingButtonTappedExtra>( // generated from preferences.private_browsing_button_tapped
            CommonMetricData(
                category: "preferences",
                name: "private_browsing_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["is_private"]
        )

        /// Measures the state of the "Save Logins" preference.
        static let saveLogins = BooleanMetricType( // generated from preferences.save_logins
            CommonMetricData(
                category: "preferences",
                name: "save_logins",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Measures the state of the "Show Clipboard Bar" preference.
        static let showClipboardBar = BooleanMetricType( // generated from preferences.show_clipboard_bar
            CommonMetricData(
                category: "preferences",
                name: "show_clipboard_bar",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum QrCode {
        /// Counts the number of times a QR code is scanned.
        static let scanned = CounterMetricType( // generated from qr_code.scanned
            CommonMetricData(
                category: "qr_code",
                name: "scanned",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum ReaderMode {
        /// Counts how many times the reader mode is closed.
        static let close = CounterMetricType( // generated from reader_mode.close
            CommonMetricData(
                category: "reader_mode",
                name: "close",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts how many times the reader mode is opened.
        static let open = CounterMetricType( // generated from reader_mode.open
            CommonMetricData(
                category: "reader_mode",
                name: "open",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum ReadingList {
        private static let addLabel = CounterMetricType( // generated from reading_list.add
            CommonMetricData(
                category: "reading_list",
                name: "add",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times an item is added to the reading
        /// list from the following:
        /// * Reader Mode Toolbar
        /// * Share Extension
        /// * Page Action Menu
        static let add = try! LabeledMetricType<CounterMetricType>( // generated from reading_list.add
            category: "reading_list",
            name: "add",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: addLabel,
            labels: ["page-action-menu", "reader-mode-toolbar", "share-extension"]
        )

        private static let deleteLabel = CounterMetricType( // generated from reading_list.delete
            CommonMetricData(
                category: "reading_list",
                name: "delete",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times an item is added to the
        /// reading list from the following:
        /// * Reader Mode Toolbar
        /// * Reading List Panel
        static let delete = try! LabeledMetricType<CounterMetricType>( // generated from reading_list.delete
            category: "reading_list",
            name: "delete",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: deleteLabel,
            labels: ["page-action-menu", "reader-mode-toolbar", "reading-list-panel"]
        )

        /// Counts the number of times an item is opened from the
        /// Reading List
        static let open = CounterMetricType( // generated from reading_list.open
            CommonMetricData(
                category: "reading_list",
                name: "open",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum Search {
        private static let countsLabel = CounterMetricType( // generated from search.counts
            CommonMetricData(
                category: "search",
                name: "counts",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// The labels for this counter are `{search-engine-name}.{source}`
        /// 
        /// If the search engine is bundled with Firefox-iOS, then
        /// `search-engine-name` will be the name of the search engine. If
        /// it is a custom search engine, the value will be `custom`.
        /// 
        /// The value of `source` will reflect the source from which the
        /// search started.  One of:
        /// * quicksearch
        /// * suggestion
        /// * actionbar
        static let counts = try! LabeledMetricType<CounterMetricType>( // generated from search.counts
            category: "search",
            name: "counts",
            sendInPings: ["baseline", "metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: countsLabel,
            labels: nil
        )

        /// The default search engine identifier if the search engine is
        /// pre-loaded with Firefox-iOS.  If it's a custom search engine,
        /// then the value will be 'custom'.
        static let defaultEngine = StringMetricType( // generated from search.default_engine
            CommonMetricData(
                category: "search",
                name: "default_engine",
                sendInPings: ["baseline", "metrics"],
                lifetime: .application,
                disabled: true
            )
        )

        private static let googleTopsitePressedLabel = CounterMetricType( // generated from search.google_topsite_pressed
            CommonMetricData(
                category: "search",
                name: "google_topsite_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times the google top site button
        /// is pressed
        static let googleTopsitePressed = try! LabeledMetricType<CounterMetricType>( // generated from search.google_topsite_pressed
            category: "search",
            name: "google_topsite_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: googleTopsitePressedLabel,
            labels: nil
        )

        private static let inContentLabel = CounterMetricType( // generated from search.in_content
            CommonMetricData(
                category: "search",
                name: "in_content",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Records the type of interaction a user has on SERP pages.
        static let inContent = try! LabeledMetricType<CounterMetricType>( // generated from search.in_content
            category: "search",
            name: "in_content",
            sendInPings: ["baseline", "metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: inContentLabel,
            labels: nil
        )

        /// Counts the number of times the start search button is
        /// pressed
        static let startSearchPressed = CounterMetricType( // generated from search.start_search_pressed
            CommonMetricData(
                category: "search",
                name: "start_search_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum SettingsMenu {
        /// Counts the number of times setting as default
        /// browser menu option is tapped.
        static let setAsDefaultBrowserPressed = CounterMetricType( // generated from settings_menu.set_as_default_browser_pressed
            CommonMetricData(
                category: "settings_menu",
                name: "set_as_default_browser_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum ShareSheet {
        /// Counts the number of times a user taps copy
        /// button from Share Sheet actions
        static let copyLinkTapped = EventMetricType<NoExtras>( // generated from share_sheet.copy_link_tapped
            CommonMetricData(
                category: "share_sheet",
                name: "copy_link_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Counts the number of times a user taps Pocket icon
        /// from Share Sheet apps available
        static let pocketActionTapped = EventMetricType<NoExtras>( // generated from share_sheet.pocket_action_tapped
            CommonMetricData(
                category: "share_sheet",
                name: "pocket_action_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Counts the number of times a user taps Save to Pocket
        /// from Share Sheet actions
        static let saveToPocketTapped = EventMetricType<NoExtras>( // generated from share_sheet.save_to_pocket_tapped
            CommonMetricData(
                category: "share_sheet",
                name: "save_to_pocket_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Counts the number of times a user taps send to device
        /// button from Share Sheet actions
        static let sendDeviceTapped = EventMetricType<NoExtras>( // generated from share_sheet.send_device_tapped
            CommonMetricData(
                category: "share_sheet",
                name: "send_device_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

    }

    enum Sync {
        /// Counts the number of times a user taps
        /// on create account button in sync library view
        static let createAccountPressed = CounterMetricType( // generated from sync.create_account_pressed
            CommonMetricData(
                category: "sync",
                name: "create_account_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Recorded when user successfully logs in
        static let loginCompletedView = EventMetricType<NoExtras>( // generated from sync.login_completed_view
            CommonMetricData(
                category: "sync",
                name: "login_completed_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Recorded when user is on fxa webpage to confirm signin token
        static let loginTokenView = EventMetricType<NoExtras>( // generated from sync.login_token_view
            CommonMetricData(
                category: "sync",
                name: "login_token_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Recorded when user opens login fxa page
        static let loginView = EventMetricType<NoExtras>( // generated from sync.login_view
            CommonMetricData(
                category: "sync",
                name: "login_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Counts the number of times a user opens
        /// synced tab
        static let openTab = CounterMetricType( // generated from sync.open_tab
            CommonMetricData(
                category: "sync",
                name: "open_tab",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Recorded when user is on fxa webpage to confirm signup code
        static let registrationCodeView = EventMetricType<NoExtras>( // generated from sync.registration_code_view
            CommonMetricData(
                category: "sync",
                name: "registration_code_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Recorded when user opens successfully completes registration
        static let registrationCompletedView = EventMetricType<NoExtras>( // generated from sync.registration_completed_view
            CommonMetricData(
                category: "sync",
                name: "registration_completed_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Recorded when user opens a registration fxa page
        static let registrationView = EventMetricType<NoExtras>( // generated from sync.registration_view
            CommonMetricData(
                category: "sync",
                name: "registration_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Counts the number of times a user taps
        /// on sign in to sync button in sync
        /// library view
        static let signInSyncPressed = CounterMetricType( // generated from sync.sign_in_sync_pressed
            CommonMetricData(
                category: "sync",
                name: "sign_in_sync_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum Tabs {
        struct GroupedTabExtra: EventExtras {
            var averageTabsInAllGroups: Int32?
            var groupsTwoTabsOnly: Int32?
            var groupsWithMoreThanTwoTab: Int32?
            var totalNumOfGroups: Int32?
            var totalTabsInAllGroups: Int32?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let averageTabsInAllGroups = self.averageTabsInAllGroups {
                    record["average_tabs_in_all_groups"] = String(averageTabsInAllGroups)
                }
                if let groupsTwoTabsOnly = self.groupsTwoTabsOnly {
                    record["groups_two_tabs_only"] = String(groupsTwoTabsOnly)
                }
                if let groupsWithMoreThanTwoTab = self.groupsWithMoreThanTwoTab {
                    record["groups_with_more_than_two_tab"] = String(groupsWithMoreThanTwoTab)
                }
                if let totalNumOfGroups = self.totalNumOfGroups {
                    record["total_num_of_groups"] = String(totalNumOfGroups)
                }
                if let totalTabsInAllGroups = self.totalTabsInAllGroups {
                    record["total_tabs_in_all_groups"] = String(totalTabsInAllGroups)
                }

                return record
            }
        }

        /// Recorded when a user clicks an open tab
        static let clickTab = EventMetricType<NoExtras>( // generated from tabs.click_tab
            CommonMetricData(
                category: "tabs",
                name: "click_tab",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        private static let closeLabel = CounterMetricType( // generated from tabs.close
            CommonMetricData(
                category: "tabs",
                name: "close",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// The count of tabs closed by the user. Increments the
        /// appropriate label when either a normal or private tab
        /// is closed.
        static let close = try! LabeledMetricType<CounterMetricType>( // generated from tabs.close
            category: "tabs",
            name: "close",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: closeLabel,
            labels: ["normal-tab", "private-tab"]
        )

        private static let closeAllLabel = CounterMetricType( // generated from tabs.close_all
            CommonMetricData(
                category: "tabs",
                name: "close_all",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// The count of times the user closes all tabs. Increments the
        /// appropriate label when either a normal or private tab
        /// is closed.
        static let closeAll = try! LabeledMetricType<CounterMetricType>( // generated from tabs.close_all
            category: "tabs",
            name: "close_all",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: closeAllLabel,
            labels: ["normal-tab", "private-tab"]
        )

        /// Recorded when a user closes the tab tray
        static let closeTabTray = EventMetricType<NoExtras>( // generated from tabs.close_tab_tray
            CommonMetricData(
                category: "tabs",
                name: "close_tab_tray",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Measures the current open tab count as the application
        /// goes to background. Each background event adds to this
        /// metric, making it the cumulative sum of all open tabs
        /// when the app goes to background during the period of
        /// time covered by a single metrics ping. This can be
        /// divided by the number of baseline pings with
        /// `ping_info.reason="inactive"` from the `start_time` to
        /// the `end_time` of the metrics ping to determine the
        /// average open tabs per foreground "session".
        static let cumulativeCount = CounterMetricType( // generated from tabs.cumulative_count
            CommonMetricData(
                category: "tabs",
                name: "cumulative_count",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Recorded when a user opens the tab tray with grouped tab
        static let groupedTab = EventMetricType<GroupedTabExtra>( // generated from tabs.grouped_tab
            CommonMetricData(
                category: "tabs",
                name: "grouped_tab",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["average_tabs_in_all_groups", "groups_two_tabs_only", "groups_with_more_than_two_tab", "total_num_of_groups", "total_tabs_in_all_groups"]
        )

        /// Recorded when a user closes the tab in a group
        static let groupedTabClosed = CounterMetricType( // generated from tabs.grouped_tab_closed
            CommonMetricData(
                category: "tabs",
                name: "grouped_tab_closed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// This counts the number of times a user has tapped the search
        /// icon for grouped tabs in the tab tray.
        static let groupedTabSearch = CounterMetricType( // generated from tabs.grouped_tab_search
            CommonMetricData(
                category: "tabs",
                name: "grouped_tab_search",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// This counts the number of times a user navigates back in tab
        /// history by swiping from the left edge of the device to the right.
        static let navigateTabBackSwipe = CounterMetricType( // generated from tabs.navigate_tab_back_swipe
            CommonMetricData(
                category: "tabs",
                name: "navigate_tab_back_swipe",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// This counts the number of times a user taps the back
        /// button on a tab's toolbar.
        static let navigateTabHistoryBack = CounterMetricType( // generated from tabs.navigate_tab_history_back
            CommonMetricData(
                category: "tabs",
                name: "navigate_tab_history_back",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// This counts the number of times a user taps the forward
        /// button on a tab's toolbar.
        static let navigateTabHistoryForward = CounterMetricType( // generated from tabs.navigate_tab_history_forward
            CommonMetricData(
                category: "tabs",
                name: "navigate_tab_history_forward",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times the add new tab button is
        /// pressed
        static let newTabPressed = CounterMetricType( // generated from tabs.new_tab_pressed
            CommonMetricData(
                category: "tabs",
                name: "new_tab_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Record the number of URI's visited by the user.
        static let normalAndPrivateUriCount = CounterMetricType( // generated from tabs.normal_and_private_uri_count
            CommonMetricData(
                category: "tabs",
                name: "normal_and_private_uri_count",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// A snapshot of how many normal tabs a user has opened when he
        /// closes the application.
        static let normalTabsQuantity = QuantityMetricType( // generated from tabs.normal_tabs_quantity
            CommonMetricData(
                category: "tabs",
                name: "normal_tabs_quantity",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        private static let openLabel = CounterMetricType( // generated from tabs.open
            CommonMetricData(
                category: "tabs",
                name: "open",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// The count of tabs opened by the user. Increments the
        /// appropriate label when either a normal or private tab
        /// is opened.
        static let open = try! LabeledMetricType<CounterMetricType>( // generated from tabs.open
            category: "tabs",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: openLabel,
            labels: ["normal-tab", "private-tab"]
        )

        /// Recorded when a user opens the tab tray
        static let openTabTray = EventMetricType<NoExtras>( // generated from tabs.open_tab_tray
            CommonMetricData(
                category: "tabs",
                name: "open_tab_tray",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Records when tab view button is pressed
        static let pressTabToolbar = EventMetricType<NoExtras>( // generated from tabs.press_tab_toolbar
            CommonMetricData(
                category: "tabs",
                name: "press_tab_toolbar",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// Records when a top tab is pressed
        static let pressTopTab = EventMetricType<NoExtras>( // generated from tabs.press_top_tab
            CommonMetricData(
                category: "tabs",
                name: "press_top_tab",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , []
        )

        /// A snapshot of how many private tabs a user has opened when he
        /// closes the application.
        static let privateTabsQuantity = QuantityMetricType( // generated from tabs.private_tabs_quantity
            CommonMetricData(
                category: "tabs",
                name: "private_tabs_quantity",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Record the number of times a user pulls down
        /// on a page to reload.
        static let pullToRefresh = CounterMetricType( // generated from tabs.pull_to_refresh
            CommonMetricData(
                category: "tabs",
                name: "pull_to_refresh",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// This counts the number of times a user taps the reload
        /// button in the URL bar.
        static let reloadFromUrlBar = CounterMetricType( // generated from tabs.reload_from_url_bar
            CommonMetricData(
                category: "tabs",
                name: "reload_from_url_bar",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum Theme {
        /// Measures the state of the "Use System Light/Dark Mode"
        /// theme preference.
        static let useSystemTheme = BooleanMetricType( // generated from theme.use_system_theme
            CommonMetricData(
                category: "theme",
                name: "use_system_theme",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum TopSites {
        struct ContextualMenuExtra: EventExtras {
            var type: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let type = self.type {
                    record["type"] = String(type)
                }

                return record
            }
        }

        struct ContileClickExtra: EventExtras {
            var position: Int32?
            var source: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let position = self.position {
                    record["position"] = String(position)
                }
                if let source = self.source {
                    record["source"] = String(source)
                }

                return record
            }
        }

        struct ContileImpressionExtra: EventExtras {
            var position: Int32?
            var source: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let position = self.position {
                    record["position"] = String(position)
                }
                if let source = self.source {
                    record["source"] = String(source)
                }

                return record
            }
        }

        struct TilePressedExtra: EventExtras {
            var position: String?
            var tileType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let position = self.position {
                    record["position"] = String(position)
                }
                if let tileType = self.tileType {
                    record["tile_type"] = String(tileType)
                }

                return record
            }
        }

        /// A UUID that is unjoinable with other browser metrics. This ID will not be
        /// shared with AdM, only for internal uses. This ID is shared across all
        /// contextual services features.
        static let contextId = UuidMetricType( // generated from top_sites.context_id
            CommonMetricData(
                category: "top_sites",
                name: "context_id",
                sendInPings: ["topsites-impression"],
                lifetime: .application,
                disabled: true
            )
        )

        /// Records when a user clicks on a contextual
        /// menu option on top site
        static let contextualMenu = EventMetricType<ContextualMenuExtra>( // generated from top_sites.contextual_menu
            CommonMetricData(
                category: "top_sites",
                name: "contextual_menu",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["type"]
        )

        /// Advertiser brand for the sponsored TopSites tile
        static let contileAdvertiser = StringMetricType( // generated from top_sites.contile_advertiser
            CommonMetricData(
                category: "top_sites",
                name: "contile_advertiser",
                sendInPings: ["topsites-impression"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// A user clicked a Contile top site
        static let contileClick = EventMetricType<ContileClickExtra>( // generated from top_sites.contile_click
            CommonMetricData(
                category: "top_sites",
                name: "contile_click",
                sendInPings: ["events", "topsites-impression"],
                lifetime: .ping,
                disabled: true
            )
            , ["position", "source"]
        )

        /// A user saw a Contile top site
        static let contileImpression = EventMetricType<ContileImpressionExtra>( // generated from top_sites.contile_impression
            CommonMetricData(
                category: "top_sites",
                name: "contile_impression",
                sendInPings: ["events", "topsites-impression"],
                lifetime: .ping,
                disabled: true
            )
            , ["position", "source"]
        )

        /// The AdM reporting endpoint (impression_url for “impression” event,
        /// click_url for “click” event).
        static let contileReportingUrl = UrlMetricType( // generated from top_sites.contile_reporting_url
            CommonMetricData(
                category: "top_sites",
                name: "contile_reporting_url",
                sendInPings: ["topsites-impression"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// A unique identifier provided by the AdM for the sponsored TopSites tile
        static let contileTileId = QuantityMetricType( // generated from top_sites.contile_tile_id
            CommonMetricData(
                category: "top_sites",
                name: "contile_tile_id",
                sendInPings: ["topsites-impression"],
                lifetime: .ping,
                disabled: true
            )
        )

        private static let pressedTileOriginLabel = CounterMetricType( // generated from top_sites.pressed_tile_origin
            CommonMetricData(
                category: "top_sites",
                name: "pressed_tile_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Records an event when user taps on top site tile,
        /// with a home page origin.
        static let pressedTileOrigin = try! LabeledMetricType<CounterMetricType>( // generated from top_sites.pressed_tile_origin
            category: "top_sites",
            name: "pressed_tile_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: pressedTileOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Records an event when user taps on top site tile.
        static let tilePressed = EventMetricType<TilePressedExtra>( // generated from top_sites.tile_pressed
            CommonMetricData(
                category: "top_sites",
                name: "tile_pressed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["position", "tile_type"]
        )

    }

    enum TrackingProtection {
        /// Measures the state of the tracking-protection enabled
        /// preference.
        static let enabled = BooleanMetricType( // generated from tracking_protection.enabled
            CommonMetricData(
                category: "tracking_protection",
                name: "enabled",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// A string representing the selected strength of the
        /// tracking-protection that is enabled. One of:
        /// * basic
        /// * strict
        static let strength = StringMetricType( // generated from tracking_protection.strength
            CommonMetricData(
                category: "tracking_protection",
                name: "strength",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum Upgrade {
        struct CardViewExtra: EventExtras {
            var cardType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }

                return record
            }
        }

        struct CloseTapExtra: EventExtras {
            var cardType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }

                return record
            }
        }

        struct PrimaryButtonTapExtra: EventExtras {
            var cardType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }

                return record
            }
        }

        struct SecondaryButtonTapExtra: EventExtras {
            var cardType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }

                return record
            }
        }

        /// Records when an upgrade card is shown
        static let cardView = EventMetricType<CardViewExtra>( // generated from upgrade.card_view
            CommonMetricData(
                category: "upgrade",
                name: "card_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["card_type"]
        )

        /// Records when the user closes the upgrade onboarding.
        static let closeTap = EventMetricType<CloseTapExtra>( // generated from upgrade.close_tap
            CommonMetricData(
                category: "upgrade",
                name: "close_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["card_type"]
        )

        /// Records when the primary button is tap during the upgrade onboarding
        static let primaryButtonTap = EventMetricType<PrimaryButtonTapExtra>( // generated from upgrade.primary_button_tap
            CommonMetricData(
                category: "upgrade",
                name: "primary_button_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["card_type"]
        )

        /// Records when the secondary button is tap during the upgrade onboarding
        static let secondaryButtonTap = EventMetricType<SecondaryButtonTapExtra>( // generated from upgrade.secondary_button_tap
            CommonMetricData(
                category: "upgrade",
                name: "secondary_button_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["card_type"]
        )

    }

    enum WallpaperAnalytics {
        struct WallpaperSelectedExtra: EventExtras {
            var wallpaperName: String?
            var wallpaperType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let wallpaperName = self.wallpaperName {
                    record["wallpaper_name"] = String(wallpaperName)
                }
                if let wallpaperType = self.wallpaperType {
                    record["wallpaper_type"] = String(wallpaperType)
                }

                return record
            }
        }

        private static let themedWallpaperLabel = CounterMetricType( // generated from wallpaper_analytics.themed_wallpaper
            CommonMetricData(
                category: "wallpaper_analytics",
                name: "themed_wallpaper",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Recorded when the user enters the background. This reports
        /// the currently selected wallpaper if it's not the default.
        static let themedWallpaper = try! LabeledMetricType<CounterMetricType>( // generated from wallpaper_analytics.themed_wallpaper
            category: "wallpaper_analytics",
            name: "themed_wallpaper",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: themedWallpaperLabel,
            labels: nil
        )

        /// Recorded when the user selects a wallpaper from
        /// the wallpaper settings screen. Wallpaper information
        /// is sent in the extra keys.
        static let wallpaperSelected = EventMetricType<WallpaperSelectedExtra>( // generated from wallpaper_analytics.wallpaper_selected
            CommonMetricData(
                category: "wallpaper_analytics",
                name: "wallpaper_selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["wallpaper_name", "wallpaper_type"]
        )

    }

    enum Widget {
        /// Counts how many times the large tabs widget opens url
        static let lTabsOpenUrl = CounterMetricType( // generated from widget.l_tabs_open_url
            CommonMetricData(
                category: "widget",
                name: "l_tabs_open_url",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts how many times medium quick action
        /// widget closes private tabs
        static let mQuickActionClosePrivate = CounterMetricType( // generated from widget.m_quick_action_close_private
            CommonMetricData(
                category: "widget",
                name: "m_quick_action_close_private",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts how many times medium quick action
        /// widget opens copied links
        static let mQuickActionCopiedLink = CounterMetricType( // generated from widget.m_quick_action_copied_link
            CommonMetricData(
                category: "widget",
                name: "m_quick_action_copied_link",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts how many times medium quick action
        /// widget opens firefox for private search
        static let mQuickActionPrivateSearch = CounterMetricType( // generated from widget.m_quick_action_private_search
            CommonMetricData(
                category: "widget",
                name: "m_quick_action_private_search",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts how many times medium quick action
        /// widget opens firefox for regular search
        static let mQuickActionSearch = CounterMetricType( // generated from widget.m_quick_action_search
            CommonMetricData(
                category: "widget",
                name: "m_quick_action_search",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts how many times the medium tabs widget opens url
        static let mTabsOpenUrl = CounterMetricType( // generated from widget.m_tabs_open_url
            CommonMetricData(
                category: "widget",
                name: "m_tabs_open_url",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts how many times user opens top site tabs
        static let mTopSitesWidget = CounterMetricType( // generated from widget.m_top_sites_widget
            CommonMetricData(
                category: "widget",
                name: "m_top_sites_widget",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts how many times small quick action
        /// widget opens firefox for regular search
        static let sQuickActionSearch = CounterMetricType( // generated from widget.s_quick_action_search
            CommonMetricData(
                category: "widget",
                name: "s_quick_action_search",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    class Pings {
        public static let shared = Pings()
        private init() {
            // Intentionally left private, no external user can instantiate a new global object.
        }

        /// Recorded on first_session when the user installs the app.
        let firstSession = Ping<NoReasonCodes>(
            name: "first-session",
            includeClientId: true,
            sendIfEmpty: false,
            reasonCodes: []
        )

        /// Recorded when a sponsored top site is rendered and
        /// visible on the newtab page. Visibility is qualified
        /// as when the homepage is brought to the front of the
        /// Browser, and sponsored tiles are 100% visible on screen.
        let topsitesImpression = Ping<NoReasonCodes>(
            name: "topsites-impression",
            includeClientId: false,
            sendIfEmpty: false,
            reasonCodes: []
        )

    }

}
